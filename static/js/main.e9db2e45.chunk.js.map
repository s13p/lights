{"version":3,"sources":["Login/Login.tsx","Profile/Profile.tsx","App/logo.svg","App/App.tsx","index.tsx"],"names":["web3","Login","_ref","onLoggedIn","_useState","useState","_useState2","_slicedToArray","loading","setLoading","handleAuthenticate","_ref2","publicAddress","signature","fetch","concat","process","REACT_APP_BACKEND_URL","body","JSON","stringify","headers","method","then","response","json","handleSignMessage","_ref4","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_ref3","nonce","wrap","_context","prev","next","eth","personal","sign","sent","abrupt","t0","Error","stop","_x","apply","arguments","handleSignup","handleClick","_ref5","_callee2","coinbase","_context2","window","ethereum","alert","enable","Web3","getCoinbase","toLowerCase","users","length","catch","err","_jsxs","children","_jsx","className","onClick","disabled","Profile","auth","onLoggedOut","user","undefined","username","state","setState","useEffect","accessToken","id","jwtDecode","payload","Authorization","_objectSpread","Blockies","seed","htmlFor","name","onChange","value","target","LS_KEY","App","ls","localStorage","getItem","parse","src","logo","alt","removeItem","setItem","dotEnvConfig","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e9db2e45.chunk.js","sourcesContent":["import './Login.css';\n\nimport React, { useState } from 'react';\nimport Web3 from 'web3';\nimport type { Auth } from '../types';\n\ninterface Props {\n\tonLoggedIn: (auth: Auth) => void;\n}\n\nlet web3: Web3 | undefined; // Will hold the web3 instance\n\nexport const Login = ({ onLoggedIn }: Props): JSX.Element => {\n\tconst [loading, setLoading] = useState(false); // Loading button state\n\n\tconst handleAuthenticate = ({\n\t\tpublicAddress,\n\t\tsignature,\n\t}: {\n\t\tpublicAddress: string;\n\t\tsignature: string;\n\t}) =>\n\t\tfetch(`${process.env.REACT_APP_BACKEND_URL}/auth`, {\n\t\t\tbody: JSON.stringify({ publicAddress, signature }),\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tmethod: 'POST',\n\t\t}).then((response) => response.json());\n\n\tconst handleSignMessage = async ({\n\t\tpublicAddress,\n\t\tnonce,\n\t}: {\n\t\tpublicAddress: string;\n\t\tnonce: string;\n\t}) => {\n\t\ttry {\n\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t// @ts-ignore because web3 is defined here.\n\t\t\tconst signature = await web3.eth.personal.sign(\n\t\t\t\t`I am signing my one-time nonce: ${nonce}`,\n\t\t\t\tpublicAddress,\n\t\t\t\t'' // MetaMask will ignore the password argument here\n\t\t\t);\n\n\t\t\treturn { publicAddress, signature };\n\t\t} catch (err) {\n\t\t\tthrow new Error(\n\t\t\t\t'You need to sign the message to be able to log in.'\n\t\t\t);\n\t\t}\n\t};\n\n\tconst handleSignup = (publicAddress: string) =>\n\t\tfetch(`${process.env.REACT_APP_BACKEND_URL}/users`, {\n\t\t\tbody: JSON.stringify({ publicAddress }),\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tmethod: 'POST',\n\t\t}).then((response) => response.json());\n\n\tconst handleClick = async () => {\n\t\t// Check if MetaMask is installed\n\t\tif (!window.ethereum) {\n\t\t\twindow.alert('Please install MetaMask first.');\n\t\t\treturn;\n\t\t}\n\n\t\tif (!web3) {\n\t\t\ttry {\n\t\t\t\t// Request account access if needed\n\t\t\t\tawait window.ethereum.enable();\n\n\t\t\t\t// We don't know window.web3 version, so we use our own instance of Web3\n\t\t\t\t// with the injected provider given by MetaMask\n\t\t\t\tweb3 = new Web3(window.ethereum);\n\t\t\t} catch (error) {\n\t\t\t\twindow.alert('You need to allow MetaMask.');\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tconst coinbase = await web3.eth.getCoinbase();\n\t\tif (!coinbase) {\n\t\t\twindow.alert('Please activate MetaMask first.');\n\t\t\treturn;\n\t\t}\n\n\t\tconst publicAddress = coinbase.toLowerCase();\n\t\tsetLoading(true);\n\n\t\t// Look if user with current publicAddress is already present on backend\n\t\tfetch(\n\t\t\t`${process.env.REACT_APP_BACKEND_URL}/users?publicAddress=${publicAddress}`\n\t\t)\n\t\t\t.then((response) => response.json())\n\t\t\t// If yes, retrieve it. If no, create it.\n\t\t\t.then((users) =>\n\t\t\t\tusers.length ? users[0] : handleSignup(publicAddress)\n\t\t\t)\n\t\t\t// Popup MetaMask confirmation modal to sign message\n\t\t\t.then(handleSignMessage)\n\t\t\t// Send signature to backend on the /auth route\n\t\t\t.then(handleAuthenticate)\n\t\t\t// Pass accessToken back to parent component (to save it in localStorage)\n\t\t\t.then(onLoggedIn)\n\t\t\t.catch((err) => {\n\t\t\t\twindow.alert(err);\n\t\t\t\tsetLoading(false);\n\t\t\t});\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<p>\n\t\t\t\tPlease select your login method.\n\t\t\t\t<br />\n\t\t\t\tFor the purpose of this demo, only MetaMask login is\n\t\t\t\timplemented.\n\t\t\t</p>\n\t\t\t<button className=\"Login-button Login-mm\" onClick={handleClick}>\n\t\t\t\t{loading ? 'Loading...' : 'Login with MetaMask'}\n\t\t\t</button>\n\t\t\t<button className=\"Login-button Login-fb\" disabled>\n\t\t\t\tLogin with Facebook\n\t\t\t</button>\n\t\t\t<button className=\"Login-button Login-email\" disabled>\n\t\t\t\tLogin with Email\n\t\t\t</button>\n\t\t</div>\n\t);\n};\n","import './Profile.css';\n\nimport jwtDecode from 'jwt-decode';\nimport React, { useState, useEffect } from 'react';\nimport Blockies from 'react-blockies';\n\nimport { Auth } from '../types';\n\ninterface Props {\n\tauth: Auth;\n\tonLoggedOut: () => void;\n}\n\ninterface State {\n\tloading: boolean;\n\tuser?: {\n\t\tid: number;\n\t\tusername: string;\n\t};\n\tusername: string;\n}\n\ninterface JwtDecoded {\n\tpayload: {\n\t\tid: string;\n\t\tpublicAddress: string;\n\t};\n}\n\nexport const Profile = ({ auth, onLoggedOut }: Props): JSX.Element => {\n\tconst [state, setState] = useState<State>({\n\t\tloading: false,\n\t\tuser: undefined,\n\t\tusername: '',\n\t});\n\n\tuseEffect(() => {\n\t\tconst { accessToken } = auth;\n\t\tconst {\n\t\t\tpayload: { id },\n\t\t} = jwtDecode<JwtDecoded>(accessToken);\n\n\t\tfetch(`${process.env.REACT_APP_BACKEND_URL}/users/${id}`, {\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${accessToken}`,\n\t\t\t},\n\t\t})\n\t\t\t.then((response) => response.json())\n\t\t\t.then((user) => setState((state) => ({ ...state, user })))\n\t\t\t.catch(window.alert);\n\t}, [auth]);\n\n\tconst handleChange = ({\n\t\ttarget: { value },\n\t}: React.ChangeEvent<HTMLInputElement>) => {\n\t\tsetState({ ...state, username: value });\n\t};\n\n\tconst handleSubmit = () => {\n\t\tconst { accessToken } = auth;\n\t\tconst { user, username } = state;\n\n\t\tsetState({ ...state, loading: true });\n\n\t\tif (!user) {\n\t\t\twindow.alert(\n\t\t\t\t'The user id has not been fetched yet. Please try again in 5 seconds.'\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tfetch(`${process.env.REACT_APP_BACKEND_URL}/users/${user.id}`, {\n\t\t\tbody: JSON.stringify({ username }),\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${accessToken}`,\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tmethod: 'PATCH',\n\t\t})\n\t\t\t.then((response) => response.json())\n\t\t\t.then((user) => setState({ ...state, loading: false, user }))\n\t\t\t.catch((err) => {\n\t\t\t\twindow.alert(err);\n\t\t\t\tsetState({ ...state, loading: false });\n\t\t\t});\n\t};\n\n\tconst { accessToken } = auth;\n\n\tconst {\n\t\tpayload: { publicAddress },\n\t} = jwtDecode<JwtDecoded>(accessToken);\n\n\tconst { loading, user } = state;\n\n\tconst username = user && user.username;\n\n\treturn (\n\t\t<div className=\"Profile\">\n\t\t\t<p>\n\t\t\t\tLogged in as <Blockies seed={publicAddress} />\n\t\t\t</p>\n\t\t\t<div>\n\t\t\t\tMy username is {username ? <pre>{username}</pre> : 'not set.'}{' '}\n\t\t\t\tMy publicAddress is <pre>{publicAddress}</pre>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<label htmlFor=\"username\">Change username: </label>\n\t\t\t\t<input name=\"username\" onChange={handleChange} />\n\t\t\t\t<button disabled={loading} onClick={handleSubmit}>\n\t\t\t\t\tSubmit\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t\t<p>\n\t\t\t\t<button onClick={onLoggedOut}>Logout</button>\n\t\t\t</p>\n\t\t</div>\n\t);\n};\n","export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import './App.css';\n\nimport React, { useEffect, useState } from 'react';\n\nimport { Login } from '../Login';\nimport { Profile } from '../Profile/Profile';\nimport { Auth } from '../types';\nimport logo from './logo.svg';\n\nconst LS_KEY = 'login-with-metamask:auth';\n\ninterface State {\n\tauth?: Auth;\n}\n\nexport const App = (): JSX.Element => {\n\tconst [state, setState] = useState<State>({});\n\n\tuseEffect(() => {\n\t\t// Access token is stored in localstorage\n\t\tconst ls = window.localStorage.getItem(LS_KEY);\n\t\tconst auth = ls && JSON.parse(ls);\n\t\tsetState({ auth });\n\t}, []);\n\n\tconst handleLoggedIn = (auth: Auth) => {\n\t\tlocalStorage.setItem(LS_KEY, JSON.stringify(auth));\n\t\tsetState({ auth });\n\t};\n\n\tconst handleLoggedOut = () => {\n\t\tlocalStorage.removeItem(LS_KEY);\n\t\tsetState({ auth: undefined });\n\t};\n\n\tconst { auth } = state;\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<header className=\"App-header\">\n\t\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\n\t\t\t\t<h1 className=\"App-title\">\n\t\t\t\t\tWelcome to Login with MetaMask Demo\n\t\t\t\t</h1>\n\t\t\t</header>\n\t\t\t<div className=\"App-intro\">\n\t\t\t\t{auth ? (\n\t\t\t\t\t<Profile auth={auth} onLoggedOut={handleLoggedOut} />\n\t\t\t\t) : (\n\t\t\t\t\t<Login onLoggedIn={handleLoggedIn} />\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n","import './index.css';\n\nimport { config as dotEnvConfig } from 'dotenv';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\n// Enable us to use \"window.ethereum\".\ndeclare global {\n\tinterface Window {\n\t\tethereum: any;\n\t}\n}\n\n// Load ENV variables\ndotEnvConfig({\n\tpath:\n\t\tprocess.env.NODE_ENV === 'production'\n\t\t\t? '.env.production'\n\t\t\t: '.env.development',\n});\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}